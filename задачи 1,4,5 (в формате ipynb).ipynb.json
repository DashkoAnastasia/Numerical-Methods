{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 1\n",
    "\n",
    "Как можно заметить,\n",
    "$$ I_n = \\frac1n - a I_{n-1}$$\n",
    "\n",
    "\n",
    "Для обратной рекурсии \n",
    "$$ I_{n-1} = \\frac{- I_n + \\frac1n}a $$\n",
    "\n",
    "Для прямой рекурсии будем использовать первоначальное значение \n",
    "$$ I_0 = ln(1 + \\frac1a) $$\n",
    "\n",
    "Для обратной рекурсии начнем с $$ I_{50} = 0 $$  мы можем так сделать, потому что интеграл стремится к нулю при стремлении n к бесконечности"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "from math import log  \n",
    "def str_rec(a, n):   ## функция для прямой рекурсии\n",
    "    res = log((a + 1)) - log(a)\n",
    "    for k in range(1, n + 1):\n",
    "        res = - a * res + 1/k\n",
    "    return res\n",
    "\n",
    "def back_rec(a, n):   ## функция для обратной рекурсии\n",
    "    res = 0\n",
    "    for k in range(50, n, -1):\n",
    "        res = ( 1/(k) - res) / a\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03622697090911682"
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str_rec(0.1, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "916988169.5363449"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str_rec(10, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.814821271954306e+23"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "back_rec(0.1, 25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0035083534096819772"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "back_rec(10, 25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для а = 0.1 более удачной оказалась прямая рекурсия, так как ошибка каждый раз умножалась на число <1 и следовательно, она стремилась к нулю, тогда как в обратной рекурсии ошибка, наоборот, умножалась на 10 с каждой итерацией, поэтому мы получили отрицательный результат(которого не могло быть по определению In)\n",
    "Для а = 10 ситуация противоположная, в этом служае подходит именно обратная рекурсия, чтобы ошибка каждый раз делилась на 10, а не умножалась(как в случае с прямой рекурсией)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "def round_to_n(x, n):\n",
    "    if x==0:\n",
    "        return x\n",
    "    else:\n",
    "        return round(x, -int(math.floor(math.log10(abs(x)))) + (n - 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.624\n"
     ]
    }
   ],
   "source": [
    "res = 0\n",
    "for i in range(1, 3001):\n",
    "    res = round_to_n(res + (1/i**2), 4)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В ответе мы получаем только 2 значащие цифры, потому что начиная с определенного момента, 1/n^2 становится меньше единицы последнего разряда уже имеющейся суммы и при округлении отбрасывается, чтобы улучшить ситуацию, можно начинать суммирование с наименьших слагаемых, то есть идти с конца от 3000 до 1, тогда мы начнем суммирование с младших разрядов и они в сумме могут внести существенный вклад в итоговое число"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.645\n"
     ]
    }
   ],
   "source": [
    "res = 0\n",
    "for i in range(3000, 0, -1):\n",
    "    res = round_to_n(res + (1/i**2), 4)\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "400000.0 500.0 300000.0 1000.0 3.2 0.01\n"
     ]
    }
   ],
   "source": [
    "m1 = 40e4\n",
    "e1 = 0.05e4\n",
    "m2 = 30e4\n",
    "e2 = 0.1e4\n",
    "r = 3.2\n",
    "e3 = 0.01\n",
    "G = 6.67e-11\n",
    "print(m1, e1, m2, e2, r, e3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy.random import normal  # создаем набор данных\n",
    "ar = []\n",
    "for i in range(100000):\n",
    "    M1 = normal(m1, e1)\n",
    "    M2 = normal(m2, e2)\n",
    "    R = normal(r, e3)\n",
    "    F = (G * M1 * M2) / R ** 2\n",
    "    ar.append(F)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассчитаем среднее значение, погрешность и дисперсию для F по формулам\n",
    "$$F_{mean} = \\frac{G * M1_{mean} * M2_{mean}}{{R^2}_{mean}}$$\n",
    "\n",
    "$$ F_{error} = |\\frac{dF}{dM1} * {e1}| + |\\frac{dF}{dM2} * {e2}| + |\\frac{dF}{dR} * {e3}|$$\n",
    "\n",
    "$$F_{dev} = (\\frac{dF}{dM1})^2 * {e1}^2 + (\\frac{dF}{dM2})^2 * {e2}^2 + (\\frac{dF}{dR})^2 * {e3}^2 $$ \n",
    "\n",
    "$$   =(\\frac{G M2}{R^2})^2 * {e1}^2 + (\\frac{G M1}{R ^ 2})^2 * {e2}^2 + (\\frac{- 2 G M1 M2}{R^3})^2 * {e3}^2$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F =  0.78164 +- 0.00847\n",
      "F_dev =  3.16e-05\n"
     ]
    }
   ],
   "source": [
    "F_mean = G * m1 * m2 / r ** 2\n",
    "F_error = abs(G * m2 * e1 / r ** 2) + abs(G * m1 * e2 / r ** 2) + abs( - 2 * G * m1 * m2 * e3 / r ** 3)\n",
    "F_dev = (G * m2 * e1 / r ** 2) ** 2 + (G * m1 * e2 / r ** 2) ** 2 + ( - 2 * G * m1 * m2 * e3 / r ** 3) ** 2\n",
    "print(\"F = \", round(F_mean, 5), \"+-\", round(F_error, 5))\n",
    "print(\"F_dev = \", round(F_dev, 7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import math\n",
    "\n",
    "plt.hist(ar, range = (0.75, 0.81), bins = 20, density = True)\n",
    "\n",
    "\n",
    "mu = F_mean\n",
    "variance = F_dev\n",
    "sigma = math.sqrt(variance)\n",
    "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n",
    "plt.plot(x, norm.pdf(x, mu, sigma))\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теоретическое распределение совпало с полученным на практике, так как отклонения были небольшими и для них хорошо работала формула линеаризации и распределение получилось очень близким к нормальному"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "e1_ = 2e4\n",
    "e2_ = 10e4\n",
    "e3_ = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F =  0.78164 +- 0.78815\n"
     ]
    }
   ],
   "source": [
    "F_mean_ = G * m1 * m2 / r ** 2\n",
    "F_error_ = abs(G * m2 * e1_ / r ** 2) + abs(G * m1 * e2_ / r ** 2) + abs( - 2 * G * m1 * m2 * e3_ / r ** 3)\n",
    "print(\"F = \", round(F_mean_, 5), \"+-\", round(F_error_, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "ar_ = []\n",
    "for i in range(100000):\n",
    "    M1 = normal(m1, e1_)\n",
    "    M2 = normal(m2, e2_)\n",
    "    R = normal(r, e3_)\n",
    "    F = (G * M1 * M2) / R ** 2\n",
    "    ar_.append(F)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0.00210141, 0.02475723, 0.27397125, 0.81409914, 1.04387513,\n",
       "        0.93322279, 0.72341019, 0.54958423, 0.41404333, 0.30542673,\n",
       "        0.24277846, 0.18131223, 0.14480024, 0.11557752, 0.10099899,\n",
       "        0.08031324, 0.06461834, 0.05443964, 0.04485196, 0.0396641 ]),\n",
       " array([-0.25  , -0.0875,  0.075 ,  0.2375,  0.4   ,  0.5625,  0.725 ,\n",
       "         0.8875,  1.05  ,  1.2125,  1.375 ,  1.5375,  1.7   ,  1.8625,\n",
       "         2.025 ,  2.1875,  2.35  ,  2.5125,  2.675 ,  2.8375,  3.    ]),\n",
       " <BarContainer object of 20 artists>)"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ar_, range = (-0.25, 3), bins = 20, density = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При увеличении отклонений распределение не совпадает с нормальным, так как формула силы нелинейна и при разложении в ряд Тейлора возникают нелинейные слагаемые, имеющие значительный вес при большом отклонении, тогда как при малых отклонениях их можно было не учитывать"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
