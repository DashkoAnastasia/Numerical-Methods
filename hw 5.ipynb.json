{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.14159264636329\n"
     ]
    }
   ],
   "source": [
    "x = 1\n",
    "for i in range(100):\n",
    "    x = x + (math.cos(x) + 1)/math.sin(x)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.414213562373095\n"
     ]
    }
   ],
   "source": [
    "x = 1\n",
    "for i in range(100):\n",
    "    x = 1/2 * (x + 2/x)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.3111049318773409\n",
      "-0.15428559088622595\n",
      "-0.07698940442823243\n",
      "-0.038475676580071116\n",
      "-0.019235464666435664\n",
      "-0.009617435773010552\n",
      "-0.004808680820941547\n",
      "-0.0024043357774097274\n",
      "-0.001202167309596991\n",
      "-0.0006010835824321603\n"
     ]
    }
   ],
   "source": [
    "x = 1    #сходимость линейная\n",
    "for i in range(10):\n",
    "    x = x + (math.cos(x) + 1)/math.sin(x)\n",
    "    print(x - math.pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.08578643762690485\n",
      "0.002453104293571373\n",
      "2.123901414519125e-06\n",
      "1.5947243525715749e-12\n",
      "-2.220446049250313e-16\n",
      "0.33333333333330084 0.35294117643144196 0.35352238456116425\n"
     ]
    }
   ],
   "source": [
    "x = 1   #сходимость квадратичная\n",
    "a = []\n",
    "for i in range(5):\n",
    "    x = 1/2 * (x + 2/x)\n",
    "    print(x - math.sqrt(2))\n",
    "    a.append(x - math.sqrt(2))\n",
    "print(a[1]/a[0]**2, a[2]/a[1]**2, a[3]/a[2]**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "rnd = np.random.RandomState(1234)\n",
    "\n",
    "n = 10\n",
    "A = rnd.uniform(size=(n, n)) + np.diagflat([15]*n)\n",
    "b = rnd.uniform(size=n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_1d = np.diag(A)\n",
    "\n",
    "B = -A.copy()\n",
    "np.fill_diagonal(B, 0)\n",
    "\n",
    "D = np.diag(diag_1d)\n",
    "\n",
    "invD = np.diag(1./diag_1d)\n",
    "BB = invD @ B\n",
    "c = invD @ b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sanity checks\n",
    "from numpy.testing import assert_allclose\n",
    "\n",
    "assert_allclose(-B + D, A)\n",
    "\n",
    "xx = np.linalg.solve(A, b)\n",
    "\n",
    "np.testing.assert_allclose(A@xx, b)\n",
    "np.testing.assert_allclose(D@xx, B@xx + b)\n",
    "np.testing.assert_allclose(xx, BB@xx + c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.36436161983015336"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.norm(BB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_iter = 50\n",
    "\n",
    "x0 = np.ones(n)\n",
    "x = x0\n",
    "for _ in range(n_iter):\n",
    "    x = BB @ x + c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.11022302e-16,  1.11022302e-16, -1.11022302e-16,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -1.38777878e-17,  0.00000000e+00,\n",
       "       -4.16333634e-17,  1.11022302e-16])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A @ x - b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def jacobi_iteration(A, b, niter):\n",
    "    \n",
    "    diag_1d = np.diag(A)\n",
    "\n",
    "    B = -A.copy()\n",
    "    np.fill_diagonal(B, 0)\n",
    "\n",
    "    D = np.diag(diag_1d)\n",
    "\n",
    "    invD = np.diag(1./diag_1d)\n",
    "    B = invD @ B\n",
    "    c = invD @ b\n",
    "    \n",
    "    m = A.shape[0]\n",
    "    \n",
    "    x0 = np.ones(m)\n",
    "    \n",
    "    errors = np.zeros(n_iter)\n",
    "    \n",
    "    for i in range(n_iter):\n",
    "        x = B @ x0 + c\n",
    "        delta_x = np.linalg.norm(x - x0)\n",
    "        errors[i] = delta_x\n",
    "        \n",
    "        x0 = x\n",
    "        \n",
    "    return x, B, np.array(errors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 10\n",
    "A = rnd.uniform(size=(n, n))\n",
    "b = rnd.uniform(size=n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "n_iter = 50\n",
    "\n",
    "for j in range(6):\n",
    "    A_j = A + np.diagflat([j + 2.9]*n)\n",
    "\n",
    "    x, B, errors = jacobi_iteration(A_j, b, n_iter)\n",
    "\n",
    "    iterations = np.arange(1, n_iter + 1)\n",
    "    \n",
    "    plt.plot(iterations, errors, label=r'$||B|| \\approx %s$' % round(np.linalg.norm(B), 2))\n",
    "\n",
    "plt.ylabel(r'$||\\mathbf{x_n - x_{n-1}}||$', size=15, labelpad=15)\n",
    "plt.xlabel(r'$n$', size=15, labelpad=15)\n",
    "plt.ylim(0, 10)\n",
    "plt.xlim(1, 30)\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f_n(x):\n",
    "    return 1 + math.exp(-3*(x-5)**2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 20\n",
    "phi = np.array([2] * n)\n",
    "h = 10/(n-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-2.94894272e-04 -1.75249775e-04 -1.04146668e-04 -6.18915513e-05\n",
      " -3.67803782e-05 -2.18574882e-05 -1.29892380e-05 -7.71909117e-06\n",
      " -4.58718852e-06 -2.72597231e-06 -1.61987205e-06 -9.62489441e-07\n",
      " -5.71724280e-07 -3.39331451e-07 -2.00936237e-07 -1.18202025e-07\n",
      " -6.82107552e-08 -3.71144303e-08 -1.62991109e-08  1.21940768e-12]\n"
     ]
    }
   ],
   "source": [
    "from scipy.linalg import solve_banded as sb\n",
    "for k in range(100000):\n",
    "    A = np.zeros((n, n))\n",
    "    for j in range(n):\n",
    "        A[j, j] = -(2/h**2 + math.exp(phi[j]))\n",
    "    for j in range(n-1):\n",
    "        A[j+1, j] = 1/h**2\n",
    "        A[j, j+1] = 1/h**2\n",
    "    b = np.zeros(n)\n",
    "    for j in range(1,n-1):\n",
    "        b[j] = math.exp(phi[j]) - f_n(phi[j]) - (phi[j+1] + phi[j-1]-2*phi[j])/h**2\n",
    "    b[0] = math.exp(phi[j]) - f_n(phi[j]) - (phi[j+1] -2*phi[j])/h**2\n",
    "    b[n-1] = math.exp(phi[j]) - f_n(phi[j]) - ( phi[j-1]-2*phi[j])/h**2\n",
    "    ab = np.zeros((3, n))\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            if (1 + i - j) >= 0 and (1 + i - j) < 3:\n",
    "                ab[1 + i - j, j] = A[i,j]  \n",
    "    e =np.array( sb((1, 1), ab, b))\n",
    "    phi = phi + e\n",
    "    if (np.linalg.norm(e) < 1e-10):\n",
    "        print(k)\n",
    "        break\n",
    "print(phi)\n",
    "                    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Задание 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cmath\n",
    "def newton(f, fder, x0, eps=1e-5, maxiter=1000):\n",
    "    niter = 0\n",
    "    x = x0 + 2 * eps\n",
    "    \n",
    "    while niter < maxiter:\n",
    "        x = x0 - f(x0) / fder(x0)\n",
    "        niter += 1\n",
    "        if abs(x - x0) <= eps :\n",
    "            break \n",
    "        x0 = x\n",
    "    \n",
    "    return x, niter\n",
    "\n",
    "\n",
    "f = lambda z: z**3 - 1\n",
    "fder = lambda z: 3 * z**2\n",
    "\n",
    "\n",
    "\n",
    "points = 2000\n",
    "eps = 1e-5\n",
    "\n",
    "x_range = np.linspace(-2, 2, points)\n",
    "y_range = np.linspace(-1, 1, points)\n",
    "\n",
    "fractal = np.zeros(shape=(points, points))\n",
    "\n",
    "for i in range(points):\n",
    "    for j in range(points):\n",
    "        x = x_range[i]\n",
    "        y = y_range[j]\n",
    "        z = complex(x,y)\n",
    "        root, iteration = newton(f, fder, z, eps=1e-5, maxiter=1000)\n",
    "        if abs(root - cmath.exp(2j*cmath.pi*0/3)) <= eps:\n",
    "            fractal[i, j] = 1\n",
    "        if abs(root - cmath.exp(2j*cmath.pi*1/3)) <= eps:\n",
    "            fractal[i, j] = 2\n",
    "        if abs(root - cmath.exp(2j*cmath.pi*2/3)) <= eps:\n",
    "            fractal[i, j] = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import colors\n",
    "\n",
    "cmap = colors.ListedColormap(['red', 'black', 'blue'])\n",
    "bounds = [0, 1, 2, 3]\n",
    "\n",
    "plt.figure(figsize=[10, 10])\n",
    "\n",
    "plt.plot(0, 0, color='red', label=r'$k=0$')\n",
    "plt.plot(0, 0, color='black', label=r'$k=1$')\n",
    "plt.plot(0, 0, color='blue', label=r'$k=2$')\n",
    "\n",
    "plt.legend(prop={'size': 15})\n",
    "plt.imshow(fractal, cmap=cmap)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
